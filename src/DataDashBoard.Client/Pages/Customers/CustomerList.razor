@page "/customers"

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject ICustomerRepository CustomerRepo

<h3>Customer List</h3>

<a href="/customers/add/" class="btn btn-primary p-2 m-2">
    <span class="oi oi-pencil"></span>
    Create A Customer
</a>

<SearchBarComponent OnSearch="HandleSearch" />

<br />

@if (Customers == null)
{
    <p>Loading...</p>
}
else
{
    <nav>
        <ul class="pagination justify-content-center">
            @if (pageNumber > 1)
            {
                <li>
                    <button class="page-link" @onclick="Previous">
                        Previous
                    </button>
                </li>
            }
            else
            {
                <li>
                    <button disabled class="page-link" @onclick="Previous">
                        Previous
                    </button>
                </li>
            }


            @*@for (int p = 1; p <= Customers.Count(); p++)
                {
                    <li>
                        <a class="page-link" href="customers/@p">@p</a>
                    </li>
                }*@

            <li>
                <button class="page-link" @onclick="Next">
                    Next
                </button>
            </li>
        </ul>
    </nav>

    <table class="table table-striped table-responsive-sm">
        <thead class="thead-dark">
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>State</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize Items="Customers" Context="customer">
                <tr>
                    <td scope="row">@customer.Name</td>
                    <td scope="row">@customer.Email</td>
                    <td scope="row">@customer.State</td>
                    <td scope="row">
                        <a class="btn btn-primary" href="/customers/details/@customer.Id">
                            Details
                        </a>
                        <a class="btn btn-success" href="/customers/update/@customer.Id">
                            Update
                        </a>
                        <button type="button" class="btn btn-danger" @onclick="() => CallConfirmationModal(customer.Id)">
                            Delete
                        </button>
                    </td>
                </tr>
            </Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize>
        </tbody>
    </table>
    <Confirmation BodyMessage="Are you sure you want to delete this Customer?" OnOKClick="DeleteCustomer" @ref="_confirmation" />

}

@code {
    [Parameter] public IList<CustomerModel> Customers { get; set; }
    private int pageNumber = 1;
    private int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadCustomers(pageNumber, pageSize);
        StateHasChanged();
    }

    private async Task LoadCustomers(int pageNumber, int pageSize)
    {
        if (pageNumber < 1) pageNumber = 1;
        Customers = await CustomerRepo.GetAll(Endpoints.CustomersEndpoint + $"?page={pageNumber}&pageSize={pageSize}");
    }

    private async Task HandleSearch(string search)
    {
        Customers = await Http.GetFromJsonAsync<IList<CustomerModel>>($"api/customers?search={search}&page={pageNumber}&pageSize={pageSize}");
    }

    private async Task Clear()
    {
        await LoadCustomers(pageNumber, pageSize);
    }

    private async Task Next()
    {
        pageNumber++;
        var response = await CustomerRepo.GetAll(Endpoints.CustomersEndpoint + $"?page={pageNumber}&pageSize={pageSize}");
        Customers = response;
    }

    private async Task Previous()
    {
        pageNumber--;
        var response = await CustomerRepo.GetAll(Endpoints.CustomersEndpoint + $"?page={pageNumber}&pageSize={pageSize}");
        Customers = response;
    }

    private async Task ResetToFirstPage()
    {
        pageNumber = 1;
        var response = await CustomerRepo.GetAll(Endpoints.CustomersEndpoint + $"?page={pageNumber}&pageSize={pageSize}");
        Customers = response;
        StateHasChanged();
    }

    private Confirmation _confirmation;
    private int _customerToDelete;

    private void CallConfirmationModal(int id)
    {
        _customerToDelete = id;
        _confirmation.Show();
    }

    private async Task DeleteCustomer()
    {
        _confirmation.Hide();
        await CustomerRepo.Delete(Endpoints.CustomersEndpoint, _customerToDelete);
        await CustomerRepo.GetAll(Endpoints.CustomersEndpoint);
    }

}
