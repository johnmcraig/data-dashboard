@page "/customers"

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject ICustomerRepository CustomerRepo

<h3>Customer List</h3>

<a href="/customers/add/" class="btn btn-primary p-2 m-2">
    <span class="oi oi-pencil"></span>
    Create A Customer
</a>
<SearchBarComponent OnSearch="HandleSearch" />
<br/>

@if (Model == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table table-striped table-responsive-sm">
        <thead class="thead-dark">
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>State</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in Model)
            {
                <tr>
                    <td scope="row">@customer.Name</td>
                    <td scope="row">@customer.Email</td>
                    <td scope="row">@customer.State</td>
                    <td>
                        <a href="/customers/details/@customer.Id" class="btn btn-primary">
                            Details
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IList<CustomerModel> Model;

    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await StartHubConnection();
        Model = await CustomerRepo.GetAll(Endpoints.CustomersEndpoint);
        AddDataListener();
        StateHasChanged();
    }

    private async Task StartHubConnection()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/customerhub"))
            .Build();

        await _hubConnection.StartAsync();
        if (_hubConnection.State == HubConnectionState.Connected)
        {
            Console.WriteLine("connection started");
        }
    }

    private void AddDataListener()
    {
        _hubConnection.On<IList<CustomerModel>>("customerhub", (data) =>
        {
            foreach (var item in data)
            {
                Console.WriteLine($"Name: {item.Name}, Email: {item.Email}");
            }

            Model = data;
            StateHasChanged();
        });
    }

    private async Task HandleSearch(string search)
    {
        Model = await Http.GetFromJsonAsync<IList<CustomerModel>>($"api/customers?search={search}");
    }

    //private void CallLoadData()
    //{
    //    Task.Run(async () =>
    //    {
    //        await LoadData();
    //    });
    //}

    //protected async Task LoadData()
    //{
    //    await base.OnInitializedAsync();
    //    Model = await _repo.GetAll(Endpoints.CustomersEndpoint);
    //    StateHasChanged();
    //}

    public void Dispose()
    {
        _hubConnection.DisposeAsync();
    }
}
