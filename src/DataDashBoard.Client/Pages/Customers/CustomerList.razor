@page "/customers"

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject ICustomerRepository CustomerRepo

<h3>Customer List</h3>

<a href="/customers/add/" class="btn btn-primary p-2 m-2">
    <span class="oi oi-pencil"></span>
    Create A Customer
</a>

<SearchBarComponent OnSearch="HandleSearch" />

<br />

<nav class="pagination justify-content-center mb-2">
    <button class="page-link" @onclick="ResetToFirstPage">
        <span class="oi oi-media-skip-backward"></span>
        First Page
    </button>

    @if (PageNumber > 1)
    {
        <button class="page-link" @onclick="Previous">
            <span class="oi oi-arrow-circle-left"></span>
            Previous
        </button>
    }

    <button class="page-link" @onclick="Next">
        Next
        <span class="oi oi-arrow-circle-right"></span>
    </button>
</nav>

@if (Customers == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table table-striped table-responsive-sm">
        <thead class="thead-dark">
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>State</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize Items="Customers" Context="customer">
                <tr>
                    <td scope="row">@customer.Name</td>
                    <td scope="row">@customer.Email</td>
                    <td scope="row">@customer.State</td>
                    <td scope="row">
                        <a class="btn btn-primary" href="/customers/details/@customer.Id" >
                            Details
                        </a>

                        <button type="button" class="btn btn-danger" @onclick="() => CallConfirmationModal(customer.Id)">
                            Delete
                        </button>
                    </td>
                </tr>
            </Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize>
        </tbody>
    </table>
    <Confirmation BodyMessage="Are you sure you want to delete this Customer?" OnOKClick="DeleteCustomer" @ref="_confirmation" />

}

@code {
    private IList<CustomerModel> Customers;
    int PageNumber = 1;
    int PageSize = 20;
    int TotalPages;
    int StartPage;
    int EndPage;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadCustomers(1, 20);
        StateHasChanged();
    }

    private async Task LoadCustomers(int page, int pageSize)
    {
        Customers = await CustomerRepo.GetAll(Endpoints.CustomersEndpoint + $"?page={page}&pageSize={pageSize}");
    }

    private async Task HandleSearch(string search)
    {
        Customers = await Http.GetFromJsonAsync<IList<CustomerModel>>($"api/customers?search={search}");
    }

    private async Task Clear()
    {
        await LoadCustomers(1, 20);
    }

    private async Task Next()
    {
        PageNumber++;
        var response = await CustomerRepo.GetAll(Endpoints.CustomersEndpoint + $"?page={PageNumber}&pageSize={PageSize}");
        Customers = response;
    }

    private async Task Previous()
    {
        PageNumber--;
        var response = await CustomerRepo.GetAll(Endpoints.CustomersEndpoint + $"?page={PageNumber}&pageSize={PageSize}");
        Customers = response;
    }

    private async Task ResetToFirstPage()
    {
        PageNumber = 1;
        var response = await CustomerRepo.GetAll(Endpoints.CustomersEndpoint + $"?page={PageNumber}&pageSize={PageSize}");
        Customers = response;
        StateHasChanged();
    }

    private Confirmation _confirmation;
    private int _customerToDelete;

    private void CallConfirmationModal(int id)
    {
        _customerToDelete = id;
        _confirmation.Show();
    }

    private async Task DeleteCustomer()
    {
        _confirmation.Hide();
        await CustomerRepo.Delete(Endpoints.CustomersEndpoint, _customerToDelete);
        await LoadCustomers(1, 20);
    }

}
